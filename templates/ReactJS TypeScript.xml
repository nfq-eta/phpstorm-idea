<templateSet group="ReactJS TypeScript">
  <template name="rc" value="import * as React from 'react';&#10;&#10;export interface I$COMPONENT$Props {}&#10;&#10;export interface I$COMPONENT$State {}&#10;    &#10;export class $COMPONENT$ extends React.Component&lt;I$COMPONENT$Props, I$COMPONENT$State&gt; {&#10;    constructor(props: I$COMPONENT$Props) {&#10;        super(props);&#10;    }&#10;&#10;    render() {&#10;        return (&#10;            &lt;pre&gt;&#10;                Component name: $COMPONENT$&#10;                File name: $FILE$&#10;            &lt;/pre&gt;&#10;        );&#10;    }&#10;}&#10;" description="React: Create a React ES2015 class" toReformat="true" toShortenFQNames="true">
    <variable name="COMPONENT" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE" expression="fileName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rctest" value="import * as React from 'react';&#10;import { shallow } from 'enzyme';&#10;import enzymeToJson from 'enzyme-to-json';&#10;&#10;import { $COMPONENT$ } from '../$COMPONENT$';&#10;&#10;describe('$COMPONENT$.js', () =&gt; {&#10;    it('renders without crashing', () =&gt; {&#10;        shallow(&lt;$COMPONENT$ /&gt;);&#10;    });&#10;&#10;    it('matches snapshot', () =&gt; {&#10;        const wrapper = shallow(&lt;$COMPONENT$ /&gt;);&#10;        expect(enzymeToJson(wrapper)).toMatchSnapshot();&#10;    });&#10;    &#10;    it('$TEST$', () =&gt; {&#10;        const wrapper = shallow(&lt;$COMPONENT$ /&gt;);&#10;        $END$&#10;    });&#10;});&#10;" description="Test template for react component" toReformat="true" toShortenFQNames="true">
    <variable name="COMPONENT" expression="firstWord(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="TEST" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rcstory" value="import * as React from 'react';&#10;import { storiesOf } from '@storybook/react';&#10;import { boolean } from '@storybook/addon-knobs';&#10;import { action } from '@storybook/addon-actions';&#10;&#10;import { $COMPONENT$ } from './$COMPONENT$';&#10;&#10;const props = {&#10;    title: '$FILENAME$',&#10;};&#10;&#10;storiesOf('components/$END$/$COMPONENT_FOLDER$', module)&#10;    .add('$COMPONENT$.js', () =&gt; {&#10;        return (&#10;            &lt;$COMPONENT$ onClick={action('clicked')} {...props} disabled={boolean('Disabled', false)} /&gt;&#10;        );&#10;    });&#10;" description="Storybook template for react component" toReformat="true" toShortenFQNames="true">
    <variable name="COMPONENT" expression="firstWord(String)" defaultValue="fileNameWithoutExtension()" alwaysStopAt="true" />
    <variable name="FILENAME" expression="fileName()" defaultValue="" alwaysStopAt="true" />
    <variable name="COMPONENT_FOLDER" expression="decapitalize(COMPONENT)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rcpure" value="import * as React from 'react';&#10;&#10;export interface I$COMPONENT$Props {}&#10;&#10;export const $COMPONENT$ = (props: I$COMPONENT$Props) =&gt; {&#10;    return (&#10;        &lt;pre&gt;&#10;            Component name: $COMPONENT$&#10;            File name: $FILE$&#10;        &lt;/pre&gt;&#10;    );&#10;};&#10;" description="React: Create a React stateless component" toReformat="true" toShortenFQNames="true">
    <variable name="COMPONENT" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE" expression="fileName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="it" value="it('should $NAME$', () =&gt; {&#10;    $END$&#10;});" description="it for tests" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="desc" value="describe('$NAME$', () =&gt; {&#10;    $END$&#10;});&#10;" description="describe" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>